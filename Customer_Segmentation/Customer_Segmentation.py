# -*- coding: utf-8 -*-
"""Customer_segmentation.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1WHRKgokxuzVtxPhzMbghuONHahDh_Pd4
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from datetime import datetime
from sklearn.preprocessing import StandardScaler
from sklearn.cluster import KMeans
import plotly.express as px

df = pd.read_excel('Online Retail.xlsx', parse_dates=['InvoiceDate'])

"""### Data Cleaning and Prepartion"""

# Remove cancellations (InvoiceNo starting with 'C') and missing CustomerID
df = df[df['InvoiceNo'].astype(str).str[0] != 'C']
df = df.dropna(subset=['CustomerID'])

# Filter Quantity > 0
df = df[df['Quantity'] > 0]

# Calculate TotalPrice
df['TotalPrice'] = df['Quantity'] * df['UnitPrice']

"""Calculate RFM Matrix"""

# Latest date in dataset
max_date = df['InvoiceDate'].max()

rfm = df.groupby('CustomerID').agg({
    'InvoiceDate': lambda x: (max_date - x.max()).days,
    'InvoiceNo': 'nunique',
    'TotalPrice': 'sum'
}).reset_index()

rfm.columns = ['CustomerID', 'Recency', 'Frequency', 'Monetary']

plt.figure(figsize=(16,4))

plt.subplot(1,3,1)
sns.histplot(rfm['Recency'], bins=30, color='blue')
plt.title('Recency Distribution')

plt.subplot(1,3,2)
sns.histplot(rfm['Frequency'], bins=30, color='green')
plt.title('Frequency Distribution')

plt.subplot(1,3,3)
sns.histplot(rfm['Monetary'], bins=30, color='orange')
plt.title('Monetary Distribution')

plt.show()

rfm['Monetary_log'] = np.log1p(rfm['Monetary'])
rfm['Frequency_log'] = np.log1p(rfm['Frequency'])

features = rfm[['Recency', 'Frequency_log', 'Monetary_log']]

scaler = StandardScaler()
rfm_scaled = scaler.fit_transform(features)

wcss = []
for k in range(1,11):
    kmeans = KMeans(n_clusters=k, random_state=42)
    kmeans.fit(rfm_scaled)
    wcss.append(kmeans.inertia_)

plt.figure(figsize=(8,4))
plt.plot(range(1,11), wcss, marker='o')
plt.xlabel('Number of clusters')
plt.ylabel('Within-Cluster Sum of Squares')
plt.title('Elbow Method to find optimal k')
plt.show()

k = 3
kmeans = KMeans(n_clusters=k, random_state=42)
rfm['Cluster'] = kmeans.fit_predict(rfm_scaled)

cluster_profile = rfm.groupby('Cluster').agg({
    'Recency': 'mean',
    'Frequency': 'mean',
    'Monetary': ['mean', 'count']
}).round(1)

cluster_profile.columns = ['Recency_Mean', 'Frequency_Mean', 'Monetary_Mean', 'Count']
print(cluster_profile)

import matplotlib.pyplot as plt
from math import pi

categories = list(profile_norm.columns)
N = len(categories)

fig, axes = plt.subplots(1, len(profile_norm), subplot_kw=dict(polar=True), figsize=(5 * len(profile_norm), 5))

for ax, i in zip(axes, profile_norm.index):
    values = profile_norm.loc[i].values.flatten().tolist()
    values += values[:1]
    angles = [n / float(N) * 2 * pi for n in range(N)]
    angles += angles[:1]

    ax.set_xticks(angles[:-1])
    ax.set_xticklabels(categories, color='grey', size=8)
    ax.plot(angles, values, linewidth=2, linestyle='solid')
    ax.fill(angles, values, alpha=0.4)
    ax.set_title(f'Cluster {i} Profile', size=14, y=1.1)

plt.tight_layout()
plt.show()
fig.write_image('cluster_profiles.png')

plt.figure(figsize=(10,6))
sns.scatterplot(data=rfm, x='Recency', y='Frequency', hue='Cluster', palette='Set2', s=80)
plt.title('Customer Segments: Recency vs Frequency')
plt.xlabel('Recency (days)')
plt.ylabel('Frequency (number of purchases)')
plt.legend(title='Cluster')
plt.show()

fig = px.scatter_3d(
    rfm, x='Recency', y='Frequency', z='Monetary',
    color='Cluster', symbol='Cluster',
    title='3D Customer Segmentation (RFM)',
    labels={'Recency': 'Recency (days)', 'Frequency': 'Frequency', 'Monetary': 'Monetary Spend'}
)

# Adjust legend position and margins
fig.update_layout(
    legend=dict(
        y=0.5,           # vertically centered
        yanchor='middle',
        x=-0.2,          # move legend to left outside the plot area (negative x)
        xanchor='right'  # anchor legendâ€™s right side to this x position
    ),
    margin=dict(l=150, r=0, b=0, t=50)  # add left margin for legend space
)


fig.show()
fig.write_html('customer_segmentation_3d.html')

rfm.to_csv('customer_segments.csv', index=False)
